{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Appointments barber shops API - Swagger Documentation",
    "description": "This is API for appointments in barber shops",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "host": "http://localhost:3333/api-docs",
    "consumes": ["application/json"],
    "produces": ["application/json"]
  },
  "schemes": ["http"],
  "servers": [
    {
      "url": "http://localhost:3333",
      "description": "Development local environment API"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Endpoints related to users profile management"
    },
    {
      "name": "sessions",
      "description": "Endpoints for user authentication"
    },
    {
      "name": "password",
      "description": "Endpoints for reset passwords and send password recovery emails"
    },
    {
      "name": "appointments",
      "description": "Endpoints related to appointments management"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "This endpoint allows the creation of a new user",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the account resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": ["users"],
        "summary": "Upload avatar image to user",
        "description": "This endpoint allows you to upload image to a specific account",
        "operationId": "uploadAvatar",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadAvatar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the uploaded avatar to account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["users"],
        "summary": "show the profile of the logged in user",
        "description": "This endpoint allows logged in to see your profile",
        "operationId": "showProfile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "This response will be returned when show user profile with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update the profile of the logged in user",
        "description": "This endpoint allows logged in to update your profile",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response will be returned when updated user with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the account resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when some fields did not came the way we needed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": ["sessions"],
        "summary": "Authenticate user",
        "description": "This endpoint allows users to log with their credentials",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the user was authenticated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/forgot": {
      "post": {
        "tags": ["password"],
        "summary": "Send password recovery email",
        "description": "This endpoint allows users to request a password recovery email",
        "operationId": "sendForgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "This response will be returned when the email was send with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/reset": {
      "post": {
        "tags": ["password"],
        "summary": "Reset user password",
        "description": "This endpoint allows users to reset their passwords",
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "This response will be returned when the password was reseted with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": ["appointments"],
        "summary": "Create a new appointment",
        "description": "This endpoint allows the creation of a new appointment",
        "operationId": "addAppointment",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Appointment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a appointment resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the appointment resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when some fields did not came the way we needed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": ["appointments"],
        "summary": "Returns a list of providers except the logged in user",
        "description": "This endpoint allows the logged in user to see the list of registered providers",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "This response will be returned when return an provider list with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvidersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/providers/{providerId}/day-availability": {
      "get": {
        "tags": ["appointments"],
        "summary": "Returns a list of available and unavailable times of day for the selected provider",
        "description": "This endpoint allows you to see the list of available and unavailable hours for the selected provider by day, month and year",
        "operationId": "listProviderDailyHoursAvailability",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year values ​​to be considered for filter",
            "schema": {
              "type": "integer",
              "example": "2024"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month values ​​to be considered for filter",
            "schema": {
              "type": "integer",
              "example": "11"
            }
          },
          {
            "name": "day",
            "in": "query",
            "description": "Day values ​​to be considered for filter",
            "schema": {
              "type": "integer",
              "example": "01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of available and unavailable hours of the for selected day with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProviderDailyHoursAvailability"
                },
                "example": [
                  {
                    "hour": 8,
                    "available": false
                  },
                  {
                    "hour": 9,
                    "available": false
                  },
                  {
                    "hour": 10,
                    "available": false
                  },
                  {
                    "hour": 11,
                    "available": false
                  },
                  {
                    "hour": 12,
                    "available": false
                  }
                ]
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/providers/{providerId}/month-availability": {
      "get": {
        "tags": ["appointments"],
        "summary": "Returns a list of available and unavailable days of the month for the selected provider",
        "description": "This endpoint allows the see the list of available and unavailable days of the for the selected provider from month and year",
        "operationId": "listProviderDailiesAvailabilityByMonth",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "providerId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3c2d1188-ab65-41d3-b3b6-49adf24082d6"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year values ​​to be considered for filter",
            "schema": {
              "type": "integer",
              "example": "2024"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month values ​​to be considered for filter",
            "schema": {
              "type": "integer",
              "example": "11"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "This response will be returned when list of available and unavailable days of the for selected month with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProviderDailiesAvailabilityByMonth"
                },
                "example": [
                  {
                    "day": 1,
                    "available": false
                  },
                  {
                    "day": 2,
                    "available": false
                  },
                  {
                    "day": 3,
                    "available": false
                  },
                  {
                    "day": 4,
                    "available": false
                  }
                ]
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "EntityBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e1ecb723-6f8c-4ee6-86f6-64af13a77e8f"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-05-09 00:42:55.136515"
          }
        }
      },
      "UpdatedAt": {
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "example": "2024-05-09 00:42:55.136515"
          }
        }
      },
      "User": {
        "required": ["name", "email", "password"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "example": "email@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@123"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "email": "johndoe@example.com.br"
          },
          "password": {
            "type": "string",
            "example": "pass@12345"
          },
          "oldPassword": {
            "type": "string",
            "example": "P@ssw0rd"
          },
          "passwordConfirmation": {
            "type": "string",
            "example": "pass@12345"
          }
        }
      },
      "UploadAvatar": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "John"
              },
              "email": {
                "type": "string",
                "example": "email@email.com"
              },
              "avatarUrl": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        ]
      },
      "UserWithAvatarResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/UserResponse" },
          {
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string",
                "example": "6aacae7a79539950-ts-2.png"
              },
              "avatarUrl": {
                "type": "string",
                "example": "http://localhost:3333/avatar/6aacae7a79539950-ts-2.png"
              }
            }
          },
          { "$ref": "#/components/schemas/EntityBase" }
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@123"
          }
        }
      },
      "SessionResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MTUzNDM5MjQsImV4cCI6MTcxNTM0NTcyNCwic3ViIjoiNjVlMTcxODQtNDRlOC00MTAxLWFhMTMtMjZmMzQxMmYyZDc2In0.NlSLdGPuff8i1Clwq_n-o9jLl2N2c6Ot8iozFLWB37c"
              },
              "user": {
                "allOf": [
                  { "$ref": "#/components/schemas/UserWithAvatarResponse" }
                ]
              }
            }
          }
        ]
      },
      "ForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email+1@email.com"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "pass@12345"
          },
          "passwordConfirmation": {
            "type": "string",
            "example": "pass@12345"
          },
          "token": {
            "type": "string",
            "example": "99219f13-5d23-4148-9ec4-862a9e2446ef"
          }
        }
      },
      "Appointment": {
        "required": ["date", "providerId"],
        "type": "object",
        "properties": {
          "date": {
            "type": "date",
            "example": "2024-11-10 08:00:00"
          },
          "providerId": {
            "type": "string",
            "example": "18a82685-a4ae-4435-8cd2-b7c429e63fbb"
          }
        }
      },
      "AppointmentResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/EntityBase" },
          { "$ref": "#/components/schemas/Appointment" },
          {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "example": "b8139b60-bef9-4106-9131-0ba9b4bf5a0b"
              }
            }
          },
          { "$ref": "#/components/schemas/UpdatedAt" }
        ]
      },
      "ProvidersResponse": {
        "allOf": [{ "$ref": "#/components/schemas/UserWithAvatarResponse" }]
      },
      "ListProviderDailiesAvailabilityByMonth": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer"
          },
          "available": {
            "type": "boolean"
          }
        }
      },
      "ListProviderDailyHoursAvailability": {
        "type": "object",
        "properties": {
          "day": {
            "type": "integer"
          },
          "available": {
            "type": "boolean"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "The \"property (example)\" parameter is missing in request body"
            }
          }
        ]
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "JWT token is missing from the request headers"
            }
          }
        ]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "User not found"
            }
          }
        ]
      },
      "ConflictError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "Entity resource already exists"
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "You need to inform the old password to set a new password"
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "Internal Server Error"
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
