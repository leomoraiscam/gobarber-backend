{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "API for appointments in barber shops",
    "description": "This is API for appointments",
    "termsOfService": "http://swagger.io/terms/",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "host": "http://localhost:3333/api-docs",
    "consumes": ["application/json"],
    "produces": ["application/json"]
  },
  "schemes": ["http"],
  "servers": [
    {
      "url": "http://localhost:3333",
      "description": "Development local environment API"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Endpoints related to users profile management"
    },
    {
      "name": "sessions",
      "description": "Endpoints for user authentication"
    },
    {
      "name": "password",
      "description": "Endpoints for reset passwords and send password recovery emails"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create a new user",
        "description": "This endpoint allows the creation of a new user",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "This response will be returned when the created a account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the account resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": ["users"],
        "summary": "Upload avatar image to user",
        "description": "This endpoint allows you to upload image to a specific account",
        "operationId": "uploadAvatar",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadAvatar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the uploaded avatar to account resource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["users"],
        "summary": "show the profile of the logged in user",
        "description": "This endpoint allows logged in to see your profile",
        "operationId": "showProfile",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "This response will be returned when list of car categories with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update the profile of the logged in user",
        "description": "This endpoint allows logged in to update your profile",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This response will be returned when updated user with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "This response will be returned when the account resource already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "422": {
            "description": "This response will be returned when some fields did not came the way we needed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": ["sessions"],
        "summary": "Authenticate user",
        "description": "This endpoint allows users to log with their credentials",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Session"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "This response will be returned when the user was authenticated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when email or password is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/forgot": {
      "post": {
        "tags": ["password"],
        "summary": "Send password recovery email",
        "description": "This endpoint allows users to request a password recovery email",
        "operationId": "sendForgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "This response will be returned when the email was send with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/password/reset": {
      "post": {
        "tags": ["password"],
        "summary": "Reset user password",
        "description": "This endpoint allows users to reset their passwords",
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "This response will be returned when the password was reseted with success"
          },
          "400": {
            "description": "This response will be returned when has validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "This response will be returned when the user is not authorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "This response will be returned when the user to be deleted or does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "This response will be returned when an unexpected error occurs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/": {
      "summary": "Users CRUD",
      "post": {
        "summary": "Creates an appointment",
        "description": "Creates an appointment in the application",
        "security": [{ "BearerToken": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider_id": {
                    "type": "string"
                  },
                  "date": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "provider_id": "12d53e84-5fef-4585-b6e6-30eb25e03b42",
                "date": "2021-02-22 14:00"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully creates a new appointment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "provider_id": "12d53e84-5fef-4585-b6e6-30eb25e03b42",
                  "user_id": "9a8bf55c-e8d1-49c5-85e3-65eeea5d7634",
                  "date": "2021-02-22T17:00:00.000Z",
                  "id": "d3cdaffd-3433-4a5c-98aa-599b908307ae",
                  "created_at": "2021-02-21T23:11:25.436Z",
                  "updated_at": "2021-02-21T23:11:25.436Z"
                }
              }
            }
          },
          "400": {
            "description": "The Appointment used is already registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "You can't create an appointment on a past date."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "Internal server error"
                }
              }
            }
          }
        },
        "tags": ["Appointment"]
      }
    },
    "providers": {
      "summary": "Users CRUD",
      "get": {
        "description": "Returns a list of user's",
        "summary": "Returns a list of user's",
        "security": [{ "BearerToken": [] }],
        "responses": {
          "200": {
            "description": "List users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "date"
                    },
                    "updated_at": {
                      "type": "date"
                    },
                    "avatar_url": {
                      "type": "string"
                    }
                  }
                },
                "example": [
                  {
                    "id": "b6e5ff3e-d597-4f63-874f-350382478653",
                    "name": "John Doe",
                    "email": "johndoe@example.com.br",
                    "avatar": null,
                    "created_at": "2021-03-09T11:17:33.496Z",
                    "updated_at": "2021-03-09T11:17:33.496Z",
                    "avatar_url": null
                  }
                ]
              }
            }
          },
          "401": {
            "description": "The authorization header is missing or the token is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "JWT token is missing"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "Internal Server error"
                }
              }
            }
          }
        },
        "tags": ["Appointment"]
      }
    },
    "providers/${id}/month-availability": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "User ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "year",
          "schema": {
            "type": "integer"
          },
          "description": "The year to be returned"
        },
        {
          "in": "query",
          "name": "month",
          "schema": {
            "type": "integer"
          },
          "description": "The month to be returned"
        }
      ],
      "get": {
        "description": "Returns a available of user in specific month and year",
        "summary": "Returns dates available of spefic provider",
        "security": [{ "BearerToken": [] }],
        "responses": {
          "200": {
            "description": "Return list available of users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "day": {
                      "type": "integer"
                    },
                    "available": {
                      "type": "boolean"
                    }
                  }
                },
                "example": [
                  {
                    "day": 1,
                    "available": false
                  },
                  {
                    "day": 2,
                    "available": false
                  },
                  {
                    "day": 3,
                    "available": false
                  },
                  {
                    "day": 4,
                    "available": false
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "Internal Server error"
                }
              }
            }
          }
        },
        "tags": ["Appointment"]
      }
    },
    "providers/${id}/day-availability": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "description": "User ID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "year",
          "schema": {
            "type": "integer"
          },
          "description": "The year to be returned"
        },
        {
          "in": "query",
          "name": "month",
          "schema": {
            "type": "integer"
          },
          "description": "The month to be returned"
        },
        {
          "in": "query",
          "name": "day",
          "schema": {
            "type": "integer"
          },
          "description": "The day to be returned"
        }
      ],
      "get": {
        "description": "Returns a available of user in specific year, month and day",
        "summary": "Returns dates available of spefic provider",
        "security": [{ "BearerToken": [] }],
        "responses": {
          "200": {
            "description": "Return list available of users",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hour": {
                      "type": "integer"
                    },
                    "available": {
                      "type": "boolean"
                    }
                  }
                },
                "example": [
                  {
                    "hour": 8,
                    "available": false
                  },
                  {
                    "hour": 9,
                    "available": false
                  },
                  {
                    "hour": 10,
                    "available": false
                  },
                  {
                    "hour": 11,
                    "available": false
                  },
                  {
                    "hour": 12,
                    "available": false
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "name": "error",
                  "message": "Internal Server error"
                }
              }
            }
          }
        },
        "tags": ["Appointment"]
      }
    }
  },
  "components": {
    "schemas": {
      "EntityBase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e1ecb723-6f8c-4ee6-86f6-64af13a77e8f"
          },
          "createdAt": {
            "type": "string",
            "example": "2024-05-09 00:42:55.136515"
          }
        }
      },
      "UpdatedAt": {
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "example": "2024-05-09 00:42:55.136515"
          }
        }
      },
      "User": {
        "required": ["name", "email", "password"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "example": "email@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@123"
          }
        }
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "email": {
            "type": "string",
            "email": "johndoe@example.com.br"
          },
          "password": {
            "type": "string",
            "example": "pass@12345"
          },
          "oldPassword": {
            "type": "string",
            "example": "P@ssw0rd"
          },
          "passwordConfirmation": {
            "type": "string",
            "example": "pass@12345"
          }
        }
      },
      "UploadAvatar": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "John"
              },
              "email": {
                "type": "string",
                "example": "email@email.com"
              },
              "avatarUrl": {
                "type": "string",
                "example": null
              }
            }
          },
          {
            "$ref": "#/components/schemas/EntityBase"
          },
          {
            "$ref": "#/components/schemas/UpdatedAt"
          }
        ]
      },
      "UserWithAvatarResponse": {
        "allOf": [
          { "$ref": "#/components/schemas/UserResponse" },
          {
            "type": "object",
            "properties": {
              "avatar": {
                "type": "string",
                "example": "6aacae7a79539950-ts-2.png"
              },
              "avatarUrl": {
                "type": "string",
                "example": "http://localhost:3333/avatar/6aacae7a79539950-ts-2.png"
              }
            }
          },
          { "$ref": "#/components/schemas/EntityBase" }
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email@email.com"
          },
          "password": {
            "type": "string",
            "example": "pass@123"
          }
        }
      },
      "SessionResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MTUzNDM5MjQsImV4cCI6MTcxNTM0NTcyNCwic3ViIjoiNjVlMTcxODQtNDRlOC00MTAxLWFhMTMtMjZmMzQxMmYyZDc2In0.NlSLdGPuff8i1Clwq_n-o9jLl2N2c6Ot8iozFLWB37c"
              },
              "user": {
                "allOf": [
                  { "$ref": "#/components/schemas/UserWithAvatarResponse" }
                ]
              }
            }
          }
        ]
      },
      "ForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "email+1@email.com"
          }
        }
      },
      "ResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "pass@12345"
          },
          "passwordConfirmation": {
            "type": "string",
            "example": "pass@12345"
          },
          "token": {
            "type": "string",
            "example": "99219f13-5d23-4148-9ec4-862a9e2446ef"
          }
        }
      },
      "Appointments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "date"
          },
          "provider_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "The \"property (example)\" parameter is missing in request body"
            }
          }
        ]
      },
      "UnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "JWT token is missing from the request headers"
            }
          }
        ]
      },
      "NotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "User not found"
            }
          }
        ]
      },
      "ConflictError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "Entity resource already exists"
            }
          }
        ]
      },
      "UnprocessableEntityError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "You need to inform the old password to set a new password"
            }
          }
        ]
      },
      "InternalServerError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "example": {
              "status": "error",
              "message": "Internal Server Error"
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
